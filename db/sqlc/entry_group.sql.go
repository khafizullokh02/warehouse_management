// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: entry_group.sql

package db

import (
	"context"
)

const createEntryGroup = `-- name: CreateEntryGroup :one
INSERT INTO entry_group (
  id,
  quantity,
  action_type,
  pricing_type,
  price,
  currency,
  entry_group_status
) VALUES (
  $1,
  $2,
  $3,
  $4,
  $5,
  $6,
  $7
) RETURNING id, quantity, action_type, pricing_type, price, currency, entry_group_status, created_at, updated_at, deleted_at
`

type CreateEntryGroupParams struct {
	ID               int32            `json:"id"`
	Quantity         int32            `json:"quantity"`
	ActionType       ActionType       `json:"action_type"`
	PricingType      PricingType      `json:"pricing_type"`
	Price            float64          `json:"price"`
	Currency         CurrencyCode     `json:"currency"`
	EntryGroupStatus EntryGroupStatus `json:"entry_group_status"`
}

func (q *Queries) CreateEntryGroup(ctx context.Context, arg CreateEntryGroupParams) (EntryGroup, error) {
	row := q.db.QueryRow(ctx, createEntryGroup,
		arg.ID,
		arg.Quantity,
		arg.ActionType,
		arg.PricingType,
		arg.Price,
		arg.Currency,
		arg.EntryGroupStatus,
	)
	var i EntryGroup
	err := row.Scan(
		&i.ID,
		&i.Quantity,
		&i.ActionType,
		&i.PricingType,
		&i.Price,
		&i.Currency,
		&i.EntryGroupStatus,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteEntryGroup = `-- name: DeleteEntryGroup :exec
DELETE FROM entry_group
WHERE id = $1
`

func (q *Queries) DeleteEntryGroup(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteEntryGroup, id)
	return err
}

const getEntryGroup = `-- name: GetEntryGroup :one
SELECT id, quantity, action_type, pricing_type, price, currency, entry_group_status, created_at, updated_at, deleted_at 
FROM entry_group
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetEntryGroup(ctx context.Context, id int32) (EntryGroup, error) {
	row := q.db.QueryRow(ctx, getEntryGroup, id)
	var i EntryGroup
	err := row.Scan(
		&i.ID,
		&i.Quantity,
		&i.ActionType,
		&i.PricingType,
		&i.Price,
		&i.Currency,
		&i.EntryGroupStatus,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listEntryGroups = `-- name: ListEntryGroups :many
SELECT id, quantity, action_type, pricing_type, price, currency, entry_group_status, created_at, updated_at, deleted_at 
FROM entry_group
WHERE id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListEntryGroupsParams struct {
	ID     int32 `json:"id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListEntryGroups(ctx context.Context, arg ListEntryGroupsParams) ([]EntryGroup, error) {
	rows, err := q.db.Query(ctx, listEntryGroups, arg.ID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []EntryGroup
	for rows.Next() {
		var i EntryGroup
		if err := rows.Scan(
			&i.ID,
			&i.Quantity,
			&i.ActionType,
			&i.PricingType,
			&i.Price,
			&i.Currency,
			&i.EntryGroupStatus,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEntryGroup = `-- name: UpdateEntryGroup :one
UPDATE entry_group
SET price = $1
WHERE id = $2
RETURNING id, quantity, action_type, pricing_type, price, currency, entry_group_status, created_at, updated_at, deleted_at
`

type UpdateEntryGroupParams struct {
	Price float64 `json:"price"`
	ID    int32   `json:"id"`
}

func (q *Queries) UpdateEntryGroup(ctx context.Context, arg UpdateEntryGroupParams) (EntryGroup, error) {
	row := q.db.QueryRow(ctx, updateEntryGroup, arg.Price, arg.ID)
	var i EntryGroup
	err := row.Scan(
		&i.ID,
		&i.Quantity,
		&i.ActionType,
		&i.PricingType,
		&i.Price,
		&i.Currency,
		&i.EntryGroupStatus,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
