// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: session.sql

package db

import (
	"context"
)

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (
    user_agent,
    client_ip,
    is_blocked,
    user_id
  )
VALUES (
    $1,
    $2,
    $3,
    $4
  )
RETURNING id, user_agent, client_ip, user_id, is_blocked, created_at
`

type CreateSessionParams struct {
	UserAgent string `json:"user_agent"`
	ClientIp  string `json:"client_ip"`
	IsBlocked bool   `json:"is_blocked"`
	UserID    int32  `json:"user_id"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRow(ctx, createSession,
		arg.UserAgent,
		arg.ClientIp,
		arg.IsBlocked,
		arg.UserID,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserAgent,
		&i.ClientIp,
		&i.UserID,
		&i.IsBlocked,
		&i.CreatedAt,
	)
	return i, err
}

const getAllSessions = `-- name: GetAllSessions :many
SELECT id, user_agent, client_ip, user_id, is_blocked, created_at
FROM sessions
WHERE user_id = $1
LIMIT $3
OFFSET $2
`

type GetAllSessionsParams struct {
	UserID int32 `json:"user_id"`
	Offset int32 `json:"offset"`
	Limit  int32 `json:"limit"`
}

func (q *Queries) GetAllSessions(ctx context.Context, arg GetAllSessionsParams) ([]Session, error) {
	rows, err := q.db.Query(ctx, getAllSessions, arg.UserID, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Session
	for rows.Next() {
		var i Session
		if err := rows.Scan(
			&i.ID,
			&i.UserAgent,
			&i.ClientIp,
			&i.UserID,
			&i.IsBlocked,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
