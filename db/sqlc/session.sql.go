// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: session.sql

package db

import (
	"context"
)

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (
    user_agent,
    client_ip,
    is_blocked,
    user_id
  )
VALUES (
    $1,
    $2,
    $3,
    $4
  )
RETURNING id, user_agent, client_ip, user_id, is_blocked, created_at
`

type CreateSessionParams struct {
	UserAgent string `json:"user_agent"`
	ClientIp  string `json:"client_ip"`
	IsBlocked bool   `json:"is_blocked"`
	UserID    string `json:"user_id"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRow(ctx, createSession,
		arg.UserAgent,
		arg.ClientIp,
		arg.IsBlocked,
		arg.UserID,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserAgent,
		&i.ClientIp,
		&i.UserID,
		&i.IsBlocked,
		&i.CreatedAt,
	)
	return i, err
}

const getSession = `-- name: GetSession :one
SELECT id, user_agent, client_ip, user_id, is_blocked, created_at
FROM sessions
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetSession(ctx context.Context, id int32) (Session, error) {
	row := q.db.QueryRow(ctx, getSession, id)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserAgent,
		&i.ClientIp,
		&i.UserID,
		&i.IsBlocked,
		&i.CreatedAt,
	)
	return i, err
}
