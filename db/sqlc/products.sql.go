// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: products.sql

package db

import (
	"context"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO products (
  id,
  name,
  image,
  brand
) VALUES (
  $1, $2, $3, $4
) RETURNING id, name, sup_code, bar_code, image, brand, wholesale_price, retail_price, discount, created_at
`

type CreateProductParams struct {
	ID    int32  `json:"id"`
	Name  string `json:"name"`
	Image string `json:"image"`
	Brand string `json:"brand"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, createProduct,
		arg.ID,
		arg.Name,
		arg.Image,
		arg.Brand,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.SupCode,
		&i.BarCode,
		&i.Image,
		&i.Brand,
		&i.WholesalePrice,
		&i.RetailPrice,
		&i.Discount,
		&i.CreatedAt,
	)
	return i, err
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM products
WHERE id = $1
`

func (q *Queries) DeleteProduct(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteProduct, id)
	return err
}

const getProduct = `-- name: GetProduct :one
SELECT id, name, sup_code, bar_code, image, brand, wholesale_price, retail_price, discount, created_at FROM products
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetProduct(ctx context.Context, id int32) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProduct, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.SupCode,
		&i.BarCode,
		&i.Image,
		&i.Brand,
		&i.WholesalePrice,
		&i.RetailPrice,
		&i.Discount,
		&i.CreatedAt,
	)
	return i, err
}

const listProducts = `-- name: ListProducts :many
SELECT id, name, sup_code, bar_code, image, brand, wholesale_price, retail_price, discount, created_at FROM products
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListProductsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListProducts(ctx context.Context, arg ListProductsParams) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, listProducts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.SupCode,
			&i.BarCode,
			&i.Image,
			&i.Brand,
			&i.WholesalePrice,
			&i.RetailPrice,
			&i.Discount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :one
UPDATE products
SET name = $2
WHERE id = $1
RETURNING id, name, sup_code, bar_code, image, brand, wholesale_price, retail_price, discount, created_at
`

type UpdateProductParams struct {
	ID   int32  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, updateProduct, arg.ID, arg.Name)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.SupCode,
		&i.BarCode,
		&i.Image,
		&i.Brand,
		&i.WholesalePrice,
		&i.RetailPrice,
		&i.Discount,
		&i.CreatedAt,
	)
	return i, err
}
